// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	JobService_ListJobes_FullMethodName    = "/proto.JobService/ListJobes"
	JobService_LaunchJob_FullMethodName    = "/proto.JobService/LaunchJob"
	JobService_AttachJob_FullMethodName    = "/proto.JobService/AttachJob"
	JobService_TerminateJob_FullMethodName = "/proto.JobService/TerminateJob"
)

// JobServiceClient is the client API for JobService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobServiceClient interface {
	ListJobes(ctx context.Context, in *ListJobesRequest, opts ...grpc.CallOption) (*ListJobesResponse, error)
	LaunchJob(ctx context.Context, in *LaunchJobRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LaunchJobResponse], error)
	AttachJob(ctx context.Context, in *AttachJobRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AttachJobResponse], error)
	TerminateJob(ctx context.Context, in *TerminateJobRequest, opts ...grpc.CallOption) (*TerminateJobResponse, error)
}

type jobServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobServiceClient(cc grpc.ClientConnInterface) JobServiceClient {
	return &jobServiceClient{cc}
}

func (c *jobServiceClient) ListJobes(ctx context.Context, in *ListJobesRequest, opts ...grpc.CallOption) (*ListJobesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListJobesResponse)
	err := c.cc.Invoke(ctx, JobService_ListJobes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) LaunchJob(ctx context.Context, in *LaunchJobRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LaunchJobResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &JobService_ServiceDesc.Streams[0], JobService_LaunchJob_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LaunchJobRequest, LaunchJobResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JobService_LaunchJobClient = grpc.ServerStreamingClient[LaunchJobResponse]

func (c *jobServiceClient) AttachJob(ctx context.Context, in *AttachJobRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AttachJobResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &JobService_ServiceDesc.Streams[1], JobService_AttachJob_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AttachJobRequest, AttachJobResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JobService_AttachJobClient = grpc.ServerStreamingClient[AttachJobResponse]

func (c *jobServiceClient) TerminateJob(ctx context.Context, in *TerminateJobRequest, opts ...grpc.CallOption) (*TerminateJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TerminateJobResponse)
	err := c.cc.Invoke(ctx, JobService_TerminateJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobServiceServer is the server API for JobService service.
// All implementations must embed UnimplementedJobServiceServer
// for forward compatibility.
type JobServiceServer interface {
	ListJobes(context.Context, *ListJobesRequest) (*ListJobesResponse, error)
	LaunchJob(*LaunchJobRequest, grpc.ServerStreamingServer[LaunchJobResponse]) error
	AttachJob(*AttachJobRequest, grpc.ServerStreamingServer[AttachJobResponse]) error
	TerminateJob(context.Context, *TerminateJobRequest) (*TerminateJobResponse, error)
	mustEmbedUnimplementedJobServiceServer()
}

// UnimplementedJobServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedJobServiceServer struct{}

func (UnimplementedJobServiceServer) ListJobes(context.Context, *ListJobesRequest) (*ListJobesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobes not implemented")
}
func (UnimplementedJobServiceServer) LaunchJob(*LaunchJobRequest, grpc.ServerStreamingServer[LaunchJobResponse]) error {
	return status.Errorf(codes.Unimplemented, "method LaunchJob not implemented")
}
func (UnimplementedJobServiceServer) AttachJob(*AttachJobRequest, grpc.ServerStreamingServer[AttachJobResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AttachJob not implemented")
}
func (UnimplementedJobServiceServer) TerminateJob(context.Context, *TerminateJobRequest) (*TerminateJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateJob not implemented")
}
func (UnimplementedJobServiceServer) mustEmbedUnimplementedJobServiceServer() {}
func (UnimplementedJobServiceServer) testEmbeddedByValue()                    {}

// UnsafeJobServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobServiceServer will
// result in compilation errors.
type UnsafeJobServiceServer interface {
	mustEmbedUnimplementedJobServiceServer()
}

func RegisterJobServiceServer(s grpc.ServiceRegistrar, srv JobServiceServer) {
	// If the following call pancis, it indicates UnimplementedJobServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&JobService_ServiceDesc, srv)
}

func _JobService_ListJobes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJobesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).ListJobes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_ListJobes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).ListJobes(ctx, req.(*ListJobesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_LaunchJob_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LaunchJobRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobServiceServer).LaunchJob(m, &grpc.GenericServerStream[LaunchJobRequest, LaunchJobResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JobService_LaunchJobServer = grpc.ServerStreamingServer[LaunchJobResponse]

func _JobService_AttachJob_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AttachJobRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobServiceServer).AttachJob(m, &grpc.GenericServerStream[AttachJobRequest, AttachJobResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JobService_AttachJobServer = grpc.ServerStreamingServer[AttachJobResponse]

func _JobService_TerminateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).TerminateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_TerminateJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).TerminateJob(ctx, req.(*TerminateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobService_ServiceDesc is the grpc.ServiceDesc for JobService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.JobService",
	HandlerType: (*JobServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListJobes",
			Handler:    _JobService_ListJobes_Handler,
		},
		{
			MethodName: "TerminateJob",
			Handler:    _JobService_TerminateJob_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LaunchJob",
			Handler:       _JobService_LaunchJob_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AttachJob",
			Handler:       _JobService_AttachJob_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/service.proto",
}
