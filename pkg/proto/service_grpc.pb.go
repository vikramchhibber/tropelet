// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Server_ListProcesses_FullMethodName    = "/proto.Server/ListProcesses"
	Server_LaunchProcess_FullMethodName    = "/proto.Server/LaunchProcess"
	Server_AttachProcess_FullMethodName    = "/proto.Server/AttachProcess"
	Server_TerminateProcess_FullMethodName = "/proto.Server/TerminateProcess"
)

// ServerClient is the client API for Server service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerClient interface {
	ListProcesses(ctx context.Context, in *ListProcessesRequest, opts ...grpc.CallOption) (*ListProcessesResponse, error)
	LaunchProcess(ctx context.Context, in *LaunchProcessRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LaunchProcessResponse], error)
	AttachProcess(ctx context.Context, in *AttachProcessRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AttachProcessResponse], error)
	TerminateProcess(ctx context.Context, in *TerminateProcessRequest, opts ...grpc.CallOption) (*TerminateProcessResponse, error)
}

type serverClient struct {
	cc grpc.ClientConnInterface
}

func NewServerClient(cc grpc.ClientConnInterface) ServerClient {
	return &serverClient{cc}
}

func (c *serverClient) ListProcesses(ctx context.Context, in *ListProcessesRequest, opts ...grpc.CallOption) (*ListProcessesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProcessesResponse)
	err := c.cc.Invoke(ctx, Server_ListProcesses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) LaunchProcess(ctx context.Context, in *LaunchProcessRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LaunchProcessResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Server_ServiceDesc.Streams[0], Server_LaunchProcess_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LaunchProcessRequest, LaunchProcessResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Server_LaunchProcessClient = grpc.ServerStreamingClient[LaunchProcessResponse]

func (c *serverClient) AttachProcess(ctx context.Context, in *AttachProcessRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AttachProcessResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Server_ServiceDesc.Streams[1], Server_AttachProcess_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AttachProcessRequest, AttachProcessResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Server_AttachProcessClient = grpc.ServerStreamingClient[AttachProcessResponse]

func (c *serverClient) TerminateProcess(ctx context.Context, in *TerminateProcessRequest, opts ...grpc.CallOption) (*TerminateProcessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TerminateProcessResponse)
	err := c.cc.Invoke(ctx, Server_TerminateProcess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerServer is the server API for Server service.
// All implementations must embed UnimplementedServerServer
// for forward compatibility.
type ServerServer interface {
	ListProcesses(context.Context, *ListProcessesRequest) (*ListProcessesResponse, error)
	LaunchProcess(*LaunchProcessRequest, grpc.ServerStreamingServer[LaunchProcessResponse]) error
	AttachProcess(*AttachProcessRequest, grpc.ServerStreamingServer[AttachProcessResponse]) error
	TerminateProcess(context.Context, *TerminateProcessRequest) (*TerminateProcessResponse, error)
	mustEmbedUnimplementedServerServer()
}

// UnimplementedServerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServerServer struct{}

func (UnimplementedServerServer) ListProcesses(context.Context, *ListProcessesRequest) (*ListProcessesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProcesses not implemented")
}
func (UnimplementedServerServer) LaunchProcess(*LaunchProcessRequest, grpc.ServerStreamingServer[LaunchProcessResponse]) error {
	return status.Errorf(codes.Unimplemented, "method LaunchProcess not implemented")
}
func (UnimplementedServerServer) AttachProcess(*AttachProcessRequest, grpc.ServerStreamingServer[AttachProcessResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AttachProcess not implemented")
}
func (UnimplementedServerServer) TerminateProcess(context.Context, *TerminateProcessRequest) (*TerminateProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateProcess not implemented")
}
func (UnimplementedServerServer) mustEmbedUnimplementedServerServer() {}
func (UnimplementedServerServer) testEmbeddedByValue()                {}

// UnsafeServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerServer will
// result in compilation errors.
type UnsafeServerServer interface {
	mustEmbedUnimplementedServerServer()
}

func RegisterServerServer(s grpc.ServiceRegistrar, srv ServerServer) {
	// If the following call pancis, it indicates UnimplementedServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Server_ServiceDesc, srv)
}

func _Server_ListProcesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProcessesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).ListProcesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Server_ListProcesses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).ListProcesses(ctx, req.(*ListProcessesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_LaunchProcess_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LaunchProcessRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServerServer).LaunchProcess(m, &grpc.GenericServerStream[LaunchProcessRequest, LaunchProcessResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Server_LaunchProcessServer = grpc.ServerStreamingServer[LaunchProcessResponse]

func _Server_AttachProcess_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AttachProcessRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServerServer).AttachProcess(m, &grpc.GenericServerStream[AttachProcessRequest, AttachProcessResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Server_AttachProcessServer = grpc.ServerStreamingServer[AttachProcessResponse]

func _Server_TerminateProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).TerminateProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Server_TerminateProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).TerminateProcess(ctx, req.(*TerminateProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Server_ServiceDesc is the grpc.ServiceDesc for Server service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Server_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Server",
	HandlerType: (*ServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProcesses",
			Handler:    _Server_ListProcesses_Handler,
		},
		{
			MethodName: "TerminateProcess",
			Handler:    _Server_TerminateProcess_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LaunchProcess",
			Handler:       _Server_LaunchProcess_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AttachProcess",
			Handler:       _Server_AttachProcess_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/service.proto",
}
